Object subclass: #Cdb	instanceVariableNames: 'file, slotTable, loop, khash, hslots, hpos, kpos'	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormatJavaLike'!!Cdb commentStamp: 'kevingamelin 2/26/2016 14:01' prior: 0!Cdb implements a Pharo interface!Object subclass: #Core	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormatJavaLike'!!Core commentStamp: 'kevingamelin 2/26/2016 16:20' prior: 0!ALL core methode!!Core methodsFor: 'as yet unclassified' stamp: 'kevingamelin 2/26/2016 16:19'!hash: key	"Computes and returns the hash value for the given key."	|  h k l |	h := 5381.	k := 1.	l := 1.	1 to: k size do: [ :i | 			l := h << 5.			h := h + 1 bitAnd: 16r00000000ffffffff.			h := h bitAnd:16br00000000ffffffff.						k := key  at: i.			k := (k + 2r100) bitAnd: 16rff.			h := h raisedTo: k.	].	^ h bitAnd: 16r00000000ffffffff.! !Object subclass: #CdbMake	instanceVariableNames: 'file hashPointers tableCount tableStart pos core'	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormatJavaLike'!!CdbMake commentStamp: 'kevingamelin 2/26/2016 13:59' prior: 0!CdbMake implements the database-creation side of!!CdbMake methodsFor: 'initialize' stamp: 'Kevingamelin 2/26/2016 22:29'!initialize	super initialize	"constructs a CdbMake object and prepares it for the creation of a constant database."		self core Core new.! !!CdbMake methodsFor: 'starting' stamp: 'kevingamelin 2/26/2016 15:07'!start: filepath	"Begins the constant database creation process."	hashPointers  = LinkedList new.	tableCount = Array new: 256.	tableStart = Array new: 256.	1 to: 256 do: [ :x | tableCount at: x put: 0].	file  := FileStream forceNewFileNamed: filepath .	pos  := 2048.	file position: pos.	! !!CdbMake methodsFor: 'modal control' stamp: 'kevingamelin 2/26/2016 16:34'!writeLeInt: v	"Writes an integer in little-endian format to the constant database at the current file offset."	file nextBytesPutAll: v bitAnd: 16rff.	file nextBytesPutAll: (v >>  8) bitAnd: 16rff.	file nextBytesPutAll: (v >>  16) bitAnd: 16rff.	file nextBytesPutAll: (v >>  24) bitAnd: 16rff.! !!CdbMake methodsFor: 'modal control' stamp: 'Kevingamelin 2/26/2016 23:31'!finish	"Finalizes the constant database."	| curEntry slotPointers hp slotTable len curSlotPointer hashTable where|		"Find the start of each hash table"	curEntry := 0.	1 to: 256 do: [ :i| 		curEntry := curEntry + tableCount at: i.		tableStart at: i put: curEntry.	].	"Create a new hash pointer list in order by hash table"	slotPointers := Array new: hashPointers size.	hashPointers do: [ :i | 		Transcript  show: i; cr. 		hp := (CdbHashPointer) i.		slotPointers at: ( (tableStart at: hp hash bitAnd: 16rff ) -1) put: hp.	].	"Write out each of the hash tables, building the slot table in the process."	slotTable := ByteArray new: 2048.	1 to: 256 do: [ :i |		"Get the length of the hashtable"		len := (tableCount at: i) *2.				"Store the position of this table in the slot table"		slotTable at: (i * 8) + 0 		put: (pos 			bitAnd:  16rff).		slotTable at: (i * 8) + 1 		put: ((pos >>  8) 	bitAnd: 16rff).		slotTable at: (i * 8) + 2 		put: ((pos >> 16) 	bitAnd: 16rff).		slotTable at: (i * 8) + 3 		put: ((pos >> 24) 	bitAnd: 16rff).		slotTable at: (i * 8) + 4 + 0 	put: (len 			bitAnd: 16rff).		slotTable at: (i * 8) + 4 + 1 	put: ((len >>  8) 	bitAnd: 16rff).		slotTable at: (i * 8) + 4 + 2 	put: ((len >> 16) 	bitAnd: 16rff).		slotTable at: (i * 8) + 4 + 3 	put: ((len >>> 24)	bitAnd: 16rff).				"Build the hash table"			curSlotPointer := tableStart at: i.		hashTable := Array new: len.		1 to: 256 do: [ :j |			"Get the hash pointer"			hp := slotPointers at: curSlotPointer+1.						"Locate a free space in the hash table"			where := (hp hash >> 8) % len.			[hashTable at: where ~= nil ] 				whileTrue: [					(where+1 == len) ifTrue: [ where := 0 ].				]						"Store the hash pointer"			hashTable at: where put: hp.		].		1 to: len do: [ :j | 			hp := hashTable at: j.			( hp ~= nil )				ifTrue: [ 					self writeLeInt: (hashTable at: j hash).					self writeLeInt: (hashTable at: j pos).				]; ifFalse: [ 					self writeLeInt: 0.					self writeLeInt: 0.				].			self posplus: 8.		].	].	"Seek back to the beginning of the file and write out the slot table."	file position: 0.	file nextPutAll: slotTable.		"Close the file"	file close.	! !!CdbMake methodsFor: 'modal control' stamp: 'Kevingamelin 2/26/2016 22:00'!posplus: count	"Advances the file pointer by count bytes, throwing an exception if doing so would cause the file to grow beyond 4 GB."	| newpos |	newpos := self pos + count.	(newpos < count) ifTrue: [		FileStreamException new signal: 	'CDB file is too big.'.	]; ifFalse: [		pos:= newpos. 	]! !!CdbMake methodsFor: 'modal control' stamp: 'Kevingamelin 2/26/2016 22:02'!add: key and: data	"Adds a key to the constant database"		| hash |		"Write out the key length."	self writeLeInt: key size.	"Write out the data length"	self writeLeInt: data size.	"Write out the key"	file  nextBytesPutAll: key.	"Write out the data."	file  nextBytesPutAll: data.		"Add the hash pointer to our list"	hash := core hash: key.	hashPointers add: CdbHashPointer new: hash and: self pos.		"Add this item to the count"	tableCount at: hash bitAnd: 16rff put: (tableCount at: hash bitAnd: 16rff) +1.		"Update the file position pointer"	self posplus: 8.	self posplus: key size.	self posplus: data size.! !Object subclass: #CdbElement	instanceVariableNames: 'data key'	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormatJavaLike'!!CdbElement commentStamp: 'kevingamelin 2/26/2016 13:54' prior: 0!CdbElement represents a single element in a constant database.!!CdbElement methodsFor: 'initalize' stamp: 'kevingamelin 2/26/2016 14:09'!initialize:  k  and: d	super initialize	"Creates an instance of the CdbElement class and initializes it with the given key and data values."	self key = k.	self data = d.! !!CdbElement methodsFor: 'getter' stamp: 'kevingamelin 2/26/2016 14:06'!getData	"The data value for this element."	^ data! !!CdbElement methodsFor: 'getter' stamp: 'kevingamelin 2/26/2016 14:06'!getKey	"The key value for this element."	^ key! !Object subclass: #CdbHashPointer	instanceVariableNames: 'hash pos'	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormatJavaLike'!!CdbHashPointer commentStamp: 'Kevingamelin 2/26/2016 21:34' prior: 0!The hash value of this entry. !!CdbHashPointer methodsFor: 'initialize' stamp: 'Kevingamelin 2/26/2016 21:34'!initialize: h and: p	super initialize	"Creates a new CdbHashPointer and initializes it with the given hash value and position."	self hash = h.	self pos = p.	! !