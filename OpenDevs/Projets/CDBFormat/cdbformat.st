Object subclass: #HashPair	instanceVariableNames: 'p h'	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormat'!!HashPair commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	h:		<Object>	p:		<Object>    Implementation Points!!HashPair methodsFor: 'accessing' stamp: 'NicolasBerveglieri 2/12/2016 16:19'!h: anHh := anH! !!HashPair methodsFor: 'accessing' stamp: 'NicolasBerveglieri 2/12/2016 16:18'!p^p! !!HashPair methodsFor: 'accessing' stamp: 'NicolasBerveglieri 2/12/2016 16:18'!h^h! !!HashPair methodsFor: 'accessing' stamp: 'NicolasBerveglieri 2/12/2016 16:19'!p: aPp := aP! !Object subclass: #MainEntry	instanceVariableNames: 'pi ei'	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormat'!!MainEntry commentStamp: 'zeroCrowsky 2/11/2016 23:39' prior: 0!MainEntry class is     Instance Variables	ei:		<Object>	pi:		<Object>!!MainEntry methodsFor: 'factory' stamp: 'zeroCrowsky 2/12/2016 13:44'!createMainEntry: id	"comment stating purpose of message"	^ MainEntry new initialize: id at: 0.! !!MainEntry methodsFor: 'accesing' stamp: 'zeroCrowsky 2/12/2016 00:06'!pi	"comment stating purpose of message"	^pi! !!MainEntry methodsFor: 'accesing' stamp: 'zeroCrowsky 2/12/2016 00:07'!ei: anEi	"comment stating purpose of message"	ei := anEi! !!MainEntry methodsFor: 'accesing' stamp: 'zeroCrowsky 2/12/2016 00:08'!pi: anPi	"comment stating purpose of message"	pi := anPi! !!MainEntry methodsFor: 'accesing' stamp: 'zeroCrowsky 2/12/2016 00:07'!ei	"comment stating purpose of message"	^ei! !!MainEntry methodsFor: 'initialize' stamp: 'NicolasBerveglieri 2/12/2016 15:09'!initialize: anPi at: anEi	super initialize.	self pi: anPi.	self ei: anEi.	"comment stating purpose of message"! !!MainEntry methodsFor: 'initialize' stamp: 'NicolasBerveglieri 2/12/2016 15:09'!initialize: anPi	super initialize.	self initialize: anPi at: 0	"comment stating purpose of message"! !!MainEntry methodsFor: 'initialize' stamp: 'NicolasBerveglieri 2/12/2016 15:08'!initialize	super initialize.	"comment stating purpose of message"	ei := 0.	pi := 0! !TestCase subclass: #CDBTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormat'!!CDBTest methodsFor: 'as yet unclassified' stamp: 'NicolasBerveglieri 2/12/2016 15:00'!testSubtable	"comment stating purpose of message"	|cdb|	cdb := CDB new.	self assert: (cdb pointing:10) = (cdb subTable at:10)	! !!CDBTest methodsFor: 'as yet unclassified' stamp: 'NicolasBerveglieri 2/12/2016 15:22'!testSetNumberOfEntries|cdb|cdb := CDB new.self assert: (cdb mainTable at:11) ei = 0.cdb setNumberOfEntries: 5 at: 10.self assert: (cdb mainTable at:11 ) ei = 5 ! !!CDBTest methodsFor: 'as yet unclassified' stamp: 'NicolasBerveglieri 2/12/2016 16:07'!testAddSubtable |cdb|cdb := CDB new.cdb addSubtable: 10 and: 100.self assert: ((cdb pointing:10) size = 100).self assert: ((cdb mainTable at:10) ei = 100)! !!CDBTest methodsFor: 'as yet unclassified' stamp: 'zeroCrowsky 2/12/2016 14:22'!testInitialize	"comment stating purpose of message"	|cdb|	cdb := CDB new.	self assert: 256 = cdb mainTable size	! !!CDBTest methodsFor: 'as yet unclassified' stamp: 'NicolasBerveglieri 2/12/2016 16:11'!testHashOne|cdb|cdb := CDB new.self assert:(cdb hashOne:513) = 1! !Object subclass: #CDB	instanceVariableNames: 'mainTable subTable'	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormat'!!CDB commentStamp: 'zeroCrowsky 2/11/2016 22:52' prior: 0!Class CDB Modal!!CDB methodsFor: 'model protocol' stamp: 'NicolasBerveglieri 2/12/2016 16:10'!hashOne: h  ^(h % 256)! !!CDB methodsFor: 'accessing' stamp: 'zeroCrowsky 2/12/2016 14:20'!mainTable	^ mainTable! !!CDB methodsFor: 'accessing' stamp: 'NicolasBerveglieri 2/12/2016 15:16'!setNumberOfEntries: nbr at:anPi(mainTable at: anPi+1) ei: nbr! !!CDB methodsFor: 'accessing' stamp: 'NicolasBerveglieri 2/12/2016 14:50'!subTable	^ subTable! !!CDB methodsFor: 'accessing' stamp: 'NicolasBerveglieri 2/12/2016 15:02'!pointing: index ^subTable at:index! !!CDB methodsFor: 'accessing' stamp: 'NicolasBerveglieri 2/12/2016 15:04'!setNumberOfEntries: anPi! !!CDB methodsFor: 'model creation' stamp: 'NicolasBerveglieri 2/12/2016 16:07'!addSubtable: aPi and: anEiself subTable at:aPi put:(Array new:anEi).(self mainTable at:aPi) ei:anEi! !!CDB methodsFor: 'initalize' stamp: 'zeroCrowsky 2/12/2016 14:17'!initialize	super initialize.	mainTable := Array new: 256.	1 to: 256 do: [ :x | mainTable at: x put: (MainEntry new initialize: x - 1) ].	subTable := Array new: 256! !