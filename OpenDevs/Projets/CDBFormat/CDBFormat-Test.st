TestCase subclass: #CDBEnumTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormat-Test'!!CDBEnumTest methodsFor: 'make' stamp: 'MaximeMaroine 3/22/2016 14:30'!testOneHasMoreElement	"Playground example for use CDB make"	|expectedSize maker cdbEnum keys values|		keys := #('three' 'four').	values := #('Golden State Warriors' 'Record of Chicago Bulls').	maker := CdbMake new.	maker start: '/home/maxime/Documents/GitHub/Licence3-Semestre6/OpenDevs/Projets/Test/testOneEnumaration.cdb'.	maker add: ((keys at: 1) asByteArray) and: ((values at: 1) asByteArray).	maker add: ((keys at: 2) asByteArray) and: ((values at: 2) asByteArray).	maker finish.		cdbEnum := Cdb elements: '/home/maxime/Documents/GitHub/Licence3-Semestre6/OpenDevs/Projets/Test/testOneEnumaration.cdb'.  expectedSize := 0. [ cdbEnum hasMoreElements ]       whileTrue: [	       cdbEnum nextElement.	       expectedSize := expectedSize + 1.	   ].self assert: (keys size) = expectedSize! !!CDBEnumTest methodsFor: 'make' stamp: 'MaximeMaroine 3/22/2016 14:26'!testOneEnumaration	"Playground example for use CDB make"	|i maker cdbEnum keys values result|		keys := #('three' 'four').	values := #('Golden State Warriors' 'Record of Chicago Bulls').	maker := CdbMake new.	maker start: '/home/maxime/Documents/GitHub/Licence3-Semestre6/OpenDevs/Projets/Test/testOneEnumaration.cdb'.	maker add: ((keys at: 1) asByteArray) and: ((values at: 1) asByteArray).	maker add: ((keys at: 2) asByteArray) and: ((values at: 2) asByteArray).	maker finish.		cdbEnum := Cdb elements: '/home/maxime/Documents/GitHub/Licence3-Semestre6/OpenDevs/Projets/Test/testOneEnumaration.cdb'. i := 1. [ cdbEnum hasMoreElements ]       whileTrue: [			  result := cdbEnum nextElement.			  self assert: (keys at: i) = result getKey asString.			  self assert: (values at: i) = result getData asString.			  i := i + 1.	   ]! !Object subclass: #BridgeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormat-Test'!!BridgeTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!TestCase subclass: #CDBTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormat-Test'!!CDBTest methodsFor: 'initialize' stamp: 'MaximeMaroine 3/22/2016 15:21'!testInitialize		"Playground example for use CDB make"	|maker cdb keys values|		keys := #('three' 'four').	values := #('Golden State Warriors' 'Record of Chicago Bulls').	maker := CdbMake new.	maker start: '/home/maxime/Documents/GitHub/Licence3-Semestre6/OpenDevs/Projets/Test/testOneEnumaration.cdb'.	maker add: ((keys at: 1) asByteArray) and: ((values at: 1) asByteArray).	maker add: ((keys at: 2) asByteArray) and: ((values at: 2) asByteArray).	maker finish.	   cdb := Cdb new: '/home/maxime/Documents/GitHub/Licence3-Semestre6/OpenDevs/Projets/Test/testOneEnumaration.cdb'.		self assert: True.	! !!CDBTest methodsFor: 'find' stamp: 'MaximeMaroine 3/22/2016 14:52'!testFind	"comment stating purpose of message"	|cdb   i maker  keys values result|		keys := #('three' 'four').	values := #('Golden State Warriors' 'Record of Chicago Bulls').	maker := CdbMake new.	maker start: '/home/maxime/Documents/GitHub/Licence3-Semestre6/OpenDevs/Projets/Test/testOneEnumaration.cdb'.	maker add: ((keys at: 1) asByteArray) and: ((values at: 1) asByteArray).	maker add: ((keys at: 2) asByteArray) and: ((values at: 2) asByteArray).	maker finish.	cdb := Cdb new: '/home/maxime/Documents/GitHub/Licence3-Semestre6/OpenDevs/Projets/Test/testOneEnumaration.cdb'.	i := 1.	[ i<= 2 ]        whileTrue: [  	          result := (cdb find: ((keys at: i) asByteArray)) asString.	          self assert: (values at: i) = result.	          i := i + 1.	     ].	cdb close.! !TestCase subclass: #CDBHashTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CDBFormat-Test'!!CDBHashTest methodsFor: 'hash' stamp: 'MaximeMaroine 3/22/2016 13:47'!testHash"Les valeurs choisies sont des valeur donnée par une autre Cdb vérifiée"|b1 b2 b3 b4|b1 := #(0 128 255) asByteArray.b2 := #(0 0 0) asByteArray.b3 := #(15 33 57) asByteArray.b4 := #(255 255 255 255 255 255) asByteArray.self assert: b1 cdbHash = 193381274.self assert: b2 cdbHash = 193376997.self assert: b3 cdbHash = 193381394.self assert: b4 cdbHash = 1437972773! !